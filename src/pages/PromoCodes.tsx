import React from 'react';
import { useReactTable, getCoreRowModel } from '@tanstack/react-table';
import type { ColumnDef } from '@tanstack/react-table';
import { apiFetch } from '../services/api';

interface PromoCode {
  PromoCode: string;
  Variance: string;
  Description: string;
  GeneratedOn: string;
  GeneratedBy: string;
  ValidFrom: string;
  ValidTo: string;
  Status: string;
}

interface ApiResponse {
  Data: PromoCode[];
  Pagination: {
    CurrentPage: number;
    PageSize: number;
    TotalPages: number;
    TotalItems: number;
  };
}

const PromoCodes: React.FC = () => {
  const [data, setData] = React.useState<PromoCode[]>([]);
  const [promoCode, setPromoCode] = React.useState('');
  const [status, setStatus] = React.useState('');
  const [page, setPage] = React.useState(1);
  const [totalPages, setTotalPages] = React.useState(0);
  const pageSize = 10;

  const columns = React.useMemo<ColumnDef<PromoCode>[]>(
    () => [
      { accessorKey: 'PromoCode', header: 'Promo Code' },
      { accessorKey: 'Variance', header: 'Variance' },
      { accessorKey: 'Description', header: 'Description' },
      { accessorKey: 'GeneratedOn', header: 'Generated On' },
      { accessorKey: 'GeneratedBy', header: 'Generated By' },
      { accessorKey: 'ValidFrom', header: 'Valid From' },
      { accessorKey: 'ValidTo', header: 'Valid To' },
      { accessorKey: 'Status', header: 'Status' }
    ],
    []
  );

  const fetchData = React.useCallback(() => {
    const params = new URLSearchParams({
      page: page.toString(),
      pageSize: pageSize.toString()
    });
    if (promoCode) params.append('promoCode', promoCode);
    if (status) params.append('status', status);

    apiFetch(`/api/promocodes?${params.toString()}`)
      .then(res => {
        const json: ApiResponse = res.data;
        setData(json.Data);
        setTotalPages(json.Pagination.TotalPages);
      });
  }, [page, promoCode, status]);

  React.useEffect(() => {
    fetchData();
  }, [fetchData]);

  const table = useReactTable({ data, columns, getCoreRowModel: getCoreRowModel() });

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    setPage(1);
    fetchData();
  };

  return (
    <div>
      <h2>Promo Codes</h2>
      <form onSubmit={handleSearch}>
        <input
          placeholder="Promo Code"
          value={promoCode}
          onChange={e => setPromoCode(e.target.value)}
        />
        <input
          placeholder="Status"
          value={status}
          onChange={e => setStatus(e.target.value)}
        />
        <button type="submit">Search</button>
      </form>
      <table>
        <thead>
          {table.getHeaderGroups().map(hg => (
            <tr key={hg.id}>
              {hg.headers.map(header => (
                <th key={header.id}>{header.column.columnDef.header as string}</th>
              ))}
            </tr>
          ))}
        </thead>
        <tbody>
          {table.getRowModel().rows.map(row => (
            <tr key={row.id}>
              {row.getVisibleCells().map(cell => (
                <td key={cell.id}>{cell.getValue() as any}</td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
      <button disabled={page <= 1} onClick={() => setPage(p => p - 1)}>
        Prev
      </button>
      <span>
        {' '}Page {page} of {totalPages}{' '}
      </span>
      <button disabled={page >= totalPages} onClick={() => setPage(p => p + 1)}>
        Next
      </button>
    </div>
  );
};

export default PromoCodes;
